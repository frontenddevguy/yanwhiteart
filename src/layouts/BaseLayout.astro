---
import "../assets/styles/main.scss";

const links = [
{ href: '/', label: 'Works' },
{ href: '/about', label: 'About' },
];

const { currentPath = '' } = Astro.props;

import type { Props } from 'astro';

interface Props {
  title: string;
  description: string;
  image?: string;
  keywords?: string[];
  // Add other dynamic head elements as needed
}

const { title, description, image, keywords } = Astro.props as Props;
const siteName = "Yan White Art";
const canonicalURL = Astro.url.toString();
const defaultImage = "/yan_temple-of-the-sun.webp";
const pageImage = image ?? defaultImage;

---

<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} | {siteName}</title>
    <meta name="description" content={description} />
    {keywords && <meta name="keywords" content={keywords.join(', ')} />}
    <link rel="canonical" href={canonicalURL} />

    {/* Open Graph */}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={pageImage} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content="en_GB" />
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
</head>

<body>
    <!-- Main Navigation -->
    <nav class="navbar navbar-expand-md mb-5">
        <div class="container header">
            <a class="navbar-brand" href="/">
                <h1>Yan White</h1>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="mainNav">
                <ul class="navbar-nav ms-auto align-items-end">
                    {links.map(link => (
                    <li class="nav-item">
                        <a class={`nav-link ${ (link.href==='/' && currentPath==='/' ) || (link.href !=='/' &&
                            currentPath.startsWith(link.href)) ? 'active' : '' }`} href={link.href}>
                            {link.label}
                        </a>
                    </li>
                    ))}
                </ul>
            </div>
        </div>
    </nav>
    <slot />

    <script>
        // Import Bootstrap's JavaScript directly within the script tag
        import 'bootstrap/dist/js/bootstrap.bundle.min.js';
        import GLightbox from 'glightbox';
        import 'glightbox/dist/css/glightbox.css';
  
  
        // ==== Initialize GLightbox ====
        const lightbox = GLightbox({
          selector: '.artgallery',
          touchNavigation: true,
          loop: false,
          zoomable: false,
          width: 'auto',
          height: 'auto',
          closeButton: true,
          skin: 'clean',
        });
  
        document.addEventListener('DOMContentLoaded', () => {
        const subFilters = document.querySelector('.sub-filters');

        // Main Filters
        document.querySelectorAll('.filters .filter-button').forEach(button => {
            button.addEventListener('click', () => {
            const filter = button.dataset.filter;

            // Toggle submenu visibility
            if (subFilters) {
                subFilters.classList.toggle('d-none', filter !== 'print');

                if (filter === 'print') {
                // Trigger Hybrids by default
                const defaultSub = document.querySelector('.sub-filters .sub-filter-button[data-filter="hybrid"]');
                if (defaultSub) {
                    document.querySelectorAll('.sub-filters .sub-filter-button').forEach(btn => btn.classList.remove('active'));
                    defaultSub.classList.add('active');

                    document.querySelectorAll('.artwork').forEach(item => {
                    item.style.display = item.classList.contains('hybrid') ? '' : 'none';
                    });
                }
                }
            }

            // Main filter active class
            document.querySelectorAll('.filters .filter-button').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            // If not print, apply normal filtering
            if (filter !== 'print') {
                document.querySelectorAll('.artwork').forEach(item => {
                item.style.display = (filter === 'all' || item.classList.contains(filter)) ? '' : 'none';
                });
            }
            });
        });

        // Submenu Filters
        document.querySelectorAll('.sub-filters .sub-filter-button').forEach(button => {
            button.addEventListener('click', () => {
            const filter = button.dataset.filter;

            document.querySelectorAll('.sub-filters .sub-filter-button').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            document.querySelectorAll('.artwork').forEach(item => {
                item.style.display = item.classList.contains(filter) ? '' : 'none';
            });
            });
        });

        // Trigger initial main filter
        const defaultButton = document.querySelector('.filters .filter-button.active');
        if (defaultButton) {
            defaultButton.click();
        }
        });

      </script>
</body>

</html>